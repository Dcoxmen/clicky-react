{"version":3,"sources":["components/Navbar/Navbar.js","components/Images/Images.js","components/Container/Container.js","components/Banner/Banner.js","components/Footer/Footer.js","images.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","navMsgColor","navMessage","score","highScore","Images","onClick","e","clickEvent","target","src","name","alt","Container","shake","characters","map","i","components_Images_Images","key","Banner","class","Footer","imageArray","images","ClickyApp","state","clickMsgColor","allImages","_this","shuffleArray","wasClicked","checkClicked","bind","Object","assertThisInitialized","newArray","slice","shuffleArr","length","push","splice","Math","floor","random","this","clickedElem","_this2","prevState","shuffled","includes","setState","setTimeout","Fragment","components_Navbar_Navbar","components_Banner_Banner","components_Container_Container","imagecharacters","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba52e232.chunk.js","sourcesContent":["import React from \"react\";\n// import \"./Navbar.css\";\n\nconst Navbar = props => (\n  <div className=\"navbar \">\n    <div>React Memory Game</div>\n    <div className={props.navMsgColor}>{props.navMessage}</div>\n    <div>\n      Score: {props.score} <span className=\"pipe\">|</span> High Score:{\" \"}\n      {props.highScore}\n    </div>\n  </div>\n);\n\nexport default Navbar;\n","import React from 'react';\n// import './Character.css';\n\n// the onClick function is defined as a callback so that the clicked elements value\n// can be passed to props.clickEvent to check if the image has been clicked or not\nconst Images = props => (\n  <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\n    <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\n  </div>\n);\n\nexport default Images;\n","import React from 'react';\nimport './Container.css';\nimport Images from '../Images';\n\n// main container for each Character component\n// loops through each index in props.characters, which contains an array of character images\n// to create a new Character component for each image\n// attaches the passed down clickEvent function to each Character component\nconst Container = props => (\n  // loops through\n  <div\n    className={\n      props.shake\n        ? 'container d-flex flex-wrap justify-content-center shake'\n        : 'container d-flex flex-wrap justify-content-center'\n    }\n  >\n    {props.characters.map((a, i) => <Images name={a} key={i} clickEvent={props.clickEvent} />)}\n  </div>\n);\n\nexport default Container;\n","import React from \"react\";\n\nconst Banner = () => (\n    //   <div className=\"banner\">\n    //     <p className=\"m-0\">\n    //       \n    //     </p>\n    //   </div>\n    <div class=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n            <h1 className=\"display-4 text-center\">How do you sonic?</h1>\n            <p className=\"lead text-center\">Sonic me once, you get one. Sonic me twice, I won't be too nice.</p>\n        </div>\n    </div>\n);\n\nexport default Banner;\n","import React from \"react\";\n// import \"./Footer.css\";\n\nconst Footer = () => <div className=\"footer text-center\">yo yo ma</div>;\n\nexport default Footer;\n","import images from \"./images\";\n\nconst imageArray = [images\n];\n\nexport default imageArray;\n","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar\";\nimport Container from \"./components/Container\";\nimport Banner from \"./components/Banner\";\nimport Footer from \"./components/Footer\";\nimport images from \"./images\";\n// import logo from './logo.svg';\nimport './App.css';\n\nclass ClickyApp extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n\n    // class value message color based on user click.\n    clickMsgColor: \"\",\n\n    // class value for welcome, success, and failure message.\n    navMessage: \"Sonic a photo to begin!\",\n\n    // class value for image array\n    allImages: this.shuffleArray(),\n\n    // class value to track each clicked element\n    wasClicked: [],\n\n    // class value to shake container on incorrect click\n    shake: false\n    };\n\n    // binds access to this keyword\n    clickEvent = this.checkClicked.bind(this);\n\n    // function to shuffle images every time one is clicked\n    shuffleArray() {\n      // creates a copy of current image array so it can be modified by value\n      const newArray = images.slice();\n      // stores array after shuffled\n      const shuffleArr = [];\n      \n      // loops through array\n      // randomize array based on length\n      // pushes new array each time it is spliced\n      while (newArray.length > 0) { \n        shuffleArr.push(\n          newArray.splice(Math.floor(Math.random()* newArray.length), 1)[0]\n        );\n      }\n\n      return this.shuffleArr;\n    }\n  \n  checkClicked(clickedElem) {\n    // allows us to modify the was clicked array\n    const prevState = this.state.wasClicked.slice();\n\n    //shuffles images\n    const shuffled = this.shuffleArray();\n\n    //tracks the score\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    // If item clicked has not been registered in wasClick add to score by 1\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // If score is exactly equal to highScore, increase highScore\n      if (score === highScore) {\n        score++;\n        highScore++;\n      // else, only increase score\n      } else {\n        score++;\n      }\n\n      // adds click item to wasClicked to keep score\n      prevState.push(clickedElem);\n    }\n\n    // if element wasClicked, reset score\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      \n      return this.setState({\n        score: score,\n        highScore: highScore,\n        clickMsgColor: \"incorrect\",\n        navMessage: \"Only works once! Incorrect!\",\n        allImages: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    // upsate state if element is a new click and increase score\n    this.setState({\n      score: score,\n      highScore: highScore,\n      clickMsgColor: \"correct\",\n      navMessage: \"Super sonic skills!\",\n      allImages: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n\n    // setTimeout for correct color\n    return setTimeout(() => this.setState({ clickMsgColor: \"\"}, 500));\n  }\n\n  render() {\n    const state = this.state;\n    return (\n      <React.Fragment>\n        <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          navMessage={state.navMessage}\n          clickMsgColor={state.clickMsgColor}\n        />\n        <Banner />\n        <Container \n          shake={state.shake}\n          imagecharacters={state.allImages}\n          clickEvent={this.clickEvent}\n        />\n        <Footer />\n      </React.Fragment>\n    )\n  }\n  \n// }\n  // render() {\n  //   return (\n  //     <React.Fragment>\n  //       <div className=\"App\">\n  //         <header className=\"App-header\">\n  //           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  //           <p>\n  //             Edit <code>src/App.js</code> and save to reload.\n  //         </p>\n  //           <a\n  //             className=\"App-link\"\n  //             href=\"https://reactjs.org\"\n  //             target=\"_blank\"\n  //             rel=\"noopener noreferrer\"\n  //           >\n  //             Learn React\n  //         </a>\n  //         </header>\n  //       </div>\n  //     </React.Fragment>\n  //   );\n  // }\n}\n\nexport default ClickyApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}